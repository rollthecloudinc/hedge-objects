name: Trigger on JSON File Changes and Use Ansible to Install Software

on:
  push:
    paths:
      - '**/*.json' # Trigger when any JSON file is created or updated
  pull_request:
    paths:
      - '**/*.json' # Trigger for pull requests involving JSON file changes

jobs:
  jsonFileChanges:
    runs-on: ubuntu-latest # Use an Ubuntu-based AMD architecture environment

    steps:
      # Step 1: Confirm Runner Architecture
      - name: Check Runner Architecture
        run: |
          echo "Runner OS: $(uname -s)"
          echo "Runner Architecture: $(uname -m)"
        # Expected output for architecture is "x86_64" (AMD64)

      # Step 2: Checkout the main repository
      - name: Checkout main repository
        uses: actions/checkout@v3

      # Step 3: Checkout the "rollthecloudinc/school" repository
      - name: Checkout rollthecloudinc/school repository
        uses: actions/checkout@v3
        with:
          repository: rollthecloudinc/school # Specify the repository to checkout
          token: ${{ secrets.GITHUB_TOKEN }} # Use GitHub token for authentication
          path: school # Check out the repository into a subfolder named "school"

      # Step 4: Checkout the "rollthecloudinc/school" repository
      - name: Checkout rollthecloudinc/hedge repository
        uses: actions/checkout@v3
        with:
          repository: rollthecloudinc/hedge # Specify the repository to checkout
          token: ${{ secrets.GITHUB_TOKEN }} # Use GitHub token for authentication
          path: hedge # Check out the repository into a subfolder named "school"

      # Step 5: Set up Python (required to install Ansible)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Specify Python version (compatible for Ansible installation)

      # Step 6: Install Node.js and Serverless Framework
      - name: Set up Node.js and Installpackages including Serverless Framework
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use Node.js version compatible with Serverless Framework
      - name: Install Node & Packages Serverless Framework
        run: |
          npm install -g serverless

      # Step 7: Install Ansible
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip # Upgrade pip
          pip install ansible # Install Ansible
          ansible --version # Verify Ansible installation

      # Step 8: Run Ansible Playbooks from the "school" repository
      - name: Run Ansible Playbook Install Java
        working-directory: school # Change directory to the school repository
        run: |
          ansible-playbook playbooks/install_java.yml # Run the specified Ansible playbook

      # Step 9: Run Ansible Playbooks from the "school" repository
      - name: Run Ansible Playbook Install Go
        working-directory: school # Change directory to the school repository
        run: |
          ansible-playbook playbooks/install_go.yml # Run the specified Ansible playbook

      # Step 10: Run Ansible Playbooks from the "school" repository
      - name: Run Ansible Playbook Install Bazel
        working-directory: school # Change directory to the school repository
        run: |
          ansible-playbook playbooks/install_bazel.yml # Run the specified Ansible playbook

      # Step 11: Run Ansible Playbooks from the "school" repository
      - name: Run Ansible Playbook Install Opensearch
        working-directory: school # Change directory to the school repository
        run: |
          ansible-playbook playbooks/install_opensearch.yml # Run the specified Ansible playbook

      # Step 12: Install HEDGE NPM Packages
      - name: Install HEDGE NPM Packages
        working-directory: hedge # Change directory to the school repository
        run: |
          npm install

      # Step 13: Run Ansible Playbooks from the "school" repository
      - name: Build HEDGE func/grant_access
        working-directory: hedge # Change directory to the school repository
        run: |
          bazel build //func/grant_access --enable_bzlmod=false --enable_workspace=true

      # Step 13: Run Ansible Playbooks from the "school" repository
      - name: Run the function
        working-directory: hedge # Change directory to the school repository
        run: |
          serverless invoke local --function GrantAccess